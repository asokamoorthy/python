Exception

Base class for all exceptions

2	
StopIteration

Raised when the next() method of an iterator does not point to any object.

3	
SystemExit

Raised by the sys.exit() function.

4	
StandardError

Base class for all built-in exceptions except StopIteration and SystemExit.

5	
ArithmeticError

Base class for all errors that occur for numeric calculation.

6	
OverflowError

Raised when a calculation exceeds maximum limit for a numeric type.

7	
FloatingPointError

Raised when a floating point calculation fails.

8	
ZeroDivisionError

Raised when division or modulo by zero takes place for all numeric types.

9	
AssertionError

Raised in case of failure of the Assert statement.

10	
AttributeError

Raised in case of failure of attribute reference or assignment.

11	
EOFError

Raised when there is no input from either the raw_input() or input() function and the end of file is reached.

12	
ImportError

Raised when an import statement fails.

13	
KeyboardInterrupt

Raised when the user interrupts program execution, usually by pressing Ctrl+c.

14	
LookupError

Base class for all lookup errors.

15	
IndexError

Raised when an index is not found in a sequence.

16	
KeyError

Raised when the specified key is not found in the dictionary.

17	
NameError

Raised when an identifier is not found in the local or global namespace.

18	
UnboundLocalError

Raised when trying to access a local variable in a function or method but no value has been assigned to it.

19	
EnvironmentError

Base class for all exceptions that occur outside the Python environment.

20	
IOError

Raised when an input/ output operation fails, such as the print statement or the open() function when trying to open a file that does not exist.

21	
IOError

Raised for operating system-related errors.

22	
SyntaxError

Raised when there is an error in Python syntax.

23	
IndentationError

Raised when indentation is not specified properly.

24	
SystemError

Raised when the interpreter finds an internal problem, but when this error is encountered the Python interpreter does not exit.

25	
SystemExit

Raised when Python interpreter is quit by using the sys.exit() function. If not handled in the code, causes the interpreter to exit.

26	
TypeError

Raised when an operation or function is attempted that is invalid for the specified data type.

27	
ValueError

Raised when the built-in function for a data type has the valid type of arguments, but the arguments have invalid values specified.

28	
RuntimeError

Raised when a generated error does not fall into any category.

29	
NotImplementedError

Raised when an abstract method that needs to be implemented in an inherited class is not actually implemented.

-------------------------------------

Python File Handling
________________________________________
We can use File handling to read and write data to and from the file.
Opening a file
Before reading/writing you first need to open the file. Syntax of opening a file is.

f = open(filename, mode)

open()  function accepts two arguments filename and mode . filename is a string argument which specify filename  along with it’s path  and mode is also a string argument which is used to specify how file will be used i.e for reading or writing. And f  is a file handler object also known as file pointer.
Closing a file
After you have finished reading/writing to the file you need to close the file using close()  method like this,

1	f.close()  # where f is a file pointer
Different modes of opening a file are
MODES	DESCRIPTION
"r" 	 Open a file for read only
"w" 	 Open a file for writing. If file already exists its data will be cleared before opening. Otherwise new file will be created
"a" 	 Opens a file in append mode i.e to write a data to the end of the file
"wb" 	 Open a file to write in binary mode
"rb" 	 Open a file to read in binary mode
Let’s now look at some examples.
Writing data to the file

 f = open('myfile.txt', 'w')    # open file for writing
>>> f.write('this first line\n')   # write a line to the file
>>> f.write('this second line\n')  # write one more line to the file
>>> f.close()                      # close the file
Note: write()  method will not insert new line ( '\n'  ) automatically like print  function, you need to explicitly add '\n'  to write write()  method.
Reading data from the file
To read data back from the file you need one of these three methods.
METHODS	DESCRIPTION
read([number]) 	Return specified number of characters from the file. if omitted it will read the entire contents of the file.
readline() 	Return the next line of the file.
readlines() 	Read all the lines as a list of strings in the file
Reading all the data at once.

 f = open('myfile.txt', 'r')
 f.read() # read entire content of file at once
"this first line\nthis second line\n"
f.close()
Reading all lines as an array.
 f = open('myfile.txt', 'r')
f.readlines() # read entire content of file at once
["this first line\n", "this second line\n"]
f.close()
Reading only one line.

 f = open('myfile.txt', 'r')
>>> f.readline() # read entire content of file at once
"this first line\n"
>>> f.close()
Appending data
To append the data you need open file in 'a'  mode.
 f = open('myfile.txt', 'a')
>>> f.write("this is third line\n")
19
>>> f.close()
Looping through the data using for loop
You can iterate through the file using file pointer.

 f = open('myfile.txt', 'r')
>>> for line in f:
... print(line)
...
this first line
this second line
this is third line
 
>>> f.close()
Binary reading and writing
To perform binary i/o you need to use a module called pickle , pickle  module allows you to read and write data using load  and dump method respectively.
Writing data

 import pickle
>>> f = open('pick.dat', 'wb')
>>> pickle.dump(11, f)
>>> pickle.dump("this is a line", f)
>>> pickle.dump([1, 2, 3, 4], f)
>>> f.close()
Reading data

import pickle
>>> f = open('pick.dat', 'rb')
>>> pickle.load(f)
11
>>> pickle.load(f)
"this is a line"
>>> pickle.load(f)
[1,2,3,4]
>>> f.close()
If there is no more data to read from the file pickle.load()  throws EOFError or end of file error.

